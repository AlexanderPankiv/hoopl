\def\letbib#1#2{%
  \def\tempb##1##2##3##4##5\ends{\csname
  NAT@wrout\endcsname{##1}{##2}{##3}{##4}}%
  \def\tempc##1{\expandafter\tempb##1{??}{??}{??}{??}{??}\ends}%
  \csname @ifundefined\endcsname{b@#2\csname @extra@b@citeb\endcsname}%
     {}%
     {\expandafter\tempc\csname b@#2\csname
  @extra@b@citeb\endcsname\endcsname{#1}}}
\begin{thebibliography}{13}
\expandafter\ifx\csname natexlab\endcsname\relax\def\natexlab#1{#1}\fi
\expandafter\ifx\csname url\endcsname\relax
  \def\url#1{{\tt #1}}\fi

\bibitem[Benitez and Davidson(1988)]{benitez-davidson:portable-optimizer}
Manuel~E. Benitez and Jack~W. Davidson.
\newblock 1988 (July).
\newblock A portable global optimizer and linker.
\newblock \emph{Proceedings of the ACM SIGPLAN '88 Conference on Programming
  Language Design and Implementation, {\em in} SIGPLAN Notices}, 23\penalty0
  (7):\penalty0 329--338.

\bibitem[Cousot and Cousot(1977)]{cousot:abstract-interpretation:1977}
Patrick Cousot and Radhia Cousot.
\newblock 1977 (January).
\newblock Abstract interpretation: {A} unified lattice model for static
  analysis of programs by construction or approximation of fixpoints.
\newblock In \emph{Conference Record of the 4th ACM Symposium on Principles of
  Programming Languages}, pages~238--252.

\bibitem[Cousot and Cousot(1979)]{cousot:systematic-analysis-frameworks}
Patrick Cousot and Radhia Cousot.
\newblock 1979 (January).
\newblock Systematic design of program analysis frameworks.
\newblock In \emph{Conference Record of the 6th Annual ACM Symposium on
  Principles of Programming Languages}, pages~269--282.

\bibitem[Huet(1997)]{huet:zipper}
G{\'e}rard Huet.
\newblock 1997 (September).
\newblock The {Zipper}.
\newblock \emph{Journal of Functional Programming}, 7\penalty0 (5):\penalty0
  549--554.

\bibitem[Hughes(1986)]{hughes:lists-representation:article}
R.~John~Muir Hughes.
\newblock 1986 (March).
\newblock A novel representation of lists and its application to the function
  ``reverse''.
\newblock \emph{Information Processing Letters}, 22\penalty0 (3):\penalty0
  141--144.

\bibitem[Kam and Ullman(1976)]{kam-ullman:global-iterative-analysis}
John~B. Kam and Jeffrey~D. Ullman.
\newblock 1976.
\newblock Global data flow analysis and iterative algorithms.
\newblock \emph{Journal of the ACM}, 23\penalty0 (1):\penalty0 158--171.

\bibitem[Kam and Ullman(1977)]{kam-ullman:monotone-flow-analysis}
John~B. Kam and Jeffrey~D. Ullman.
\newblock 1977.
\newblock Monotone data flow analysis frameworks.
\newblock \emph{Acta Informatica}, 7:\penalty0 305--317.

\bibitem[Kildall(1973)]{kildall:unified-optimization}
Gary~A. Kildall.
\newblock 1973 (October).
\newblock A unified approach to global program optimization.
\newblock In \emph{Conference Record of the ACM Symposium on Principles of
  Programming Languages}, pages~194--206.

\bibitem[Lerner, Grove, and Chambers(2002)]{lerner-grove-chambers:2002}
Sorin Lerner, David Grove, and Craig Chambers.
\newblock 2002 (January).
\newblock Composing dataflow analyses and transformations.
\newblock \emph{Conference Record of the 29th Annual ACM Symposium on
  Principles of Programming Languages, {\em in} SIGPLAN Notices}, 31\penalty0
  (1):\penalty0 270--282.
\letbib{lerner-grove-chambers}{lerner-grove-chambers:2002}

\bibitem[Muchnick(1997)]{muchnick:compiler-implementation}
Steven~S. Muchnick.
\newblock 1997.
\newblock \emph{Advanced compiler design and implementation}.
\newblock Morgan Kaufmann, San Mateo, CA.

\bibitem[Ramsey and Dias(2005)]{ramsey-dias:applicative-flow-graph}
Norman Ramsey and {Jo\~ao} Dias.
\newblock 2005 (September).
\newblock An applicative control-flow graph based on {Huet}'s zipper.
\newblock In \emph{ACM SIGPLAN Workshop on ML}, pages~101--122.

\bibitem[Schmidt(1998)]{schmidt:data-flow-analysis-model-checking}
David~A. Schmidt.
\newblock 1998.
\newblock Data flow analysis is model checking of abstract interpretations.
\newblock In ACM, editor, \emph{Conference Record of the 25th Annual ACM
  Symposium on Principles of Programming Languages}, pages~\mbox{38--48}.

\bibitem[Whalley(1994)]{whalley:isolation}
David~B. Whalley.
\newblock 1994 (September).
\newblock Automatic isolation of compiler errors.
\newblock \emph{ACM Transactions on Programming Languages and Systems},
  16\penalty0 (5):\penalty0 1648--1659.

\end{thebibliography}
