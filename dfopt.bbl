\def\letbib#1#2{%
  \def\tempb##1##2##3##4##5\ends{\csname
  NAT@wrout\endcsname{##1}{##2}{##3}{##4}}%
  \def\tempc##1{\expandafter\tempb##1{??}{??}{??}{??}{??}\ends}%
  \csname @ifundefined\endcsname{b@#2\csname @extra@b@citeb\endcsname}%
     {}%
     {\expandafter\tempc\csname b@#2\csname
  @extra@b@citeb\endcsname\endcsname{#1}}}
\begin{thebibliography}{10}
\expandafter\ifx\csname natexlab\endcsname\relax\def\natexlab#1{#1}\fi
\expandafter\ifx\csname url\endcsname\relax
  \def\url#1{{\tt #1}}\fi

\bibitem[Benitez and Davidson(1988)]{benitez-davidson:portable-optimizer}
Manuel~E. Benitez and Jack~W. Davidson.
\newblock 1988 (July).
\newblock A portable global optimizer and linker.
\newblock \emph{Proceedings of the ACM SIGPLAN '88 Conference on Programming
  Language Design and Implementation, {\em in} SIGPLAN Notices}, 23\penalty0
  (7):\penalty0 329--338.

\bibitem[Dijkstra(1976)]{dijkstra:discipline}
Edsger~W. Dijkstra.
\newblock 1976.
\newblock \emph{A Discipline of Programming}.
\newblock Prentice-Hall, Englewood Cliffs, NJ.

\bibitem[Hoare(1969)]{hoare:axiomatic-basis}
C.~A.~R. Hoare.
\newblock 1969 (October).
\newblock An axiomatic basis for computer programming.
\newblock \emph{Communications of the ACM}, 12\penalty0 (10):\penalty0
  576--580.

\bibitem[Huet(1997)]{huet:zipper}
G{\'e}rard Huet.
\newblock 1997 (September).
\newblock The {Zipper}.
\newblock \emph{Journal of Functional Programming}, 7\penalty0 (5):\penalty0
  549--554.
\newblock Functional Pearl.

\bibitem[Lerner, Grove, and Chambers(2002)]{lerner-grove-chambers:2002}
Sorin Lerner, David Grove, and Craig Chambers.
\newblock 2002 (January).
\newblock Composing dataflow analyses and transformations.
\newblock \emph{Conference Record of the 29th Annual ACM Symposium on
  Principles of Programming Languages, {\em in} SIGPLAN Notices}, 31\penalty0
  (1):\penalty0 270--282.

\bibitem[{Peyton Jones} and Marlow(2002)]{peyton-jones:secrets-inliner}
Simon {Peyton Jones} and Simon Marlow.
\newblock 2002 (July).
\newblock Secrets of the {Glasgow Haskell Compiler} inliner.
\newblock \emph{Journal of Functional Programming}, 12\penalty0
  (4\&5):\penalty0 393--433.

\bibitem[{Peyton Jones}, Ramsey, and
  Reig(1999)]{peyton-jones-ramsey:garbage-collection:inproceedings}
Simon {Peyton Jones}, Norman Ramsey, and Fermin Reig.
\newblock 1999.
\newblock C\texttt{--}: a portable assembly language that supports garbage
  collection.
\newblock In \emph{International Conference on Principles and Practice of
  Declarative Programming}.

\bibitem[Ramsey and Dias(2005)]{ramsey-dias:applicative-flow-graph}
Norman Ramsey and Jo{\~a}o Dias.
\newblock 2005.
\newblock An applicative control-flow graph based on huet's zipper.
\newblock In \emph{ML Workshop}.
\letbib{ramsey-dias:applicative-control-flow}{ramsey-dias:applicative-flow-gra%
ph}

\bibitem[Ramsey and {Peyton Jones}(2000)]{peyton-jones-ramsey:exceptions}
Norman Ramsey and Simon~L. {Peyton Jones}.
\newblock 2000.
\newblock A single intermediate language that supports multiple implementations
  of exceptions.
\newblock In \emph{Conference on Programming Language Design and
  Implementation}.

\bibitem[Whalley(1994)]{whalley:isolation}
David~B. Whalley.
\newblock 1994 (September).
\newblock Automatic isolation of compiler errors.
\newblock \emph{ACM Transactions on Programming Languages and Systems},
  16\penalty0 (5):\penalty0 1648--1659.

\end{thebibliography}
