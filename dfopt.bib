@article{lerner-grove-chambers:2002,
  number = {1},
  bibdate = {Tue Feb 12 10:39:33 MST 2002},
  acknowledgement = {Acknowledge Nelson H. F. Beebe},
  author = {Sorin Lerner and David Grove and Craig Chambers},
  journal = {Conference Record of the 29th Annual ACM Symposium on Principles of Programming Languages, {\em in} SIGPLAN Notices},
  annote = {Proceedings of the 29th ACM SIGPLAN-SIGACT symposium on Principles of Programming Languages (POPL'02).},
  year = {2002},
  title = {Composing dataflow analyses and transformations},
  month = {January},
  coden = {SINODQ},
  xxxissn = {0362-1340},
  pages = {270--282},
  volume = {31},
}

@inproceedings{ramsey-dias:applicative-flow-graph,
  notselected = {1},
  refereed = {1},
  author = {Norman Ramsey and {Jo\~ao} Dias},
  pages = {101-122},
  accepted = {10},
  year = {2005},
  blurb = {A control-flow graph for doing classical imperative-style optimization in your functional compiler.},
  title = {An Applicative Control-Flow Graph Based on {Huet}'s Zipper},
  submitted = {21},
  booktitle = {ACM SIGPLAN Workshop on ML},
  topic = {zipcfg:compiler back ends:reusable code generation:pl infrastructure},
  base = {zipcfg},
  month = {September},
}

@article{peyton-jones:unification-based-gadts,
  number = {9},
  xxxaddress = {New York, NY, USA},
  volume = {41},
  author = {Peyton Jones, Simon and Vytiniotis, Dimitrios and Weirich, Stephanie and Washburn, Geoffrey},
  journal = {Proceedings of the Eleventh {ACM} {SIGPLAN} International Conference on Functional Programming (ICFP'06), {\em in} SIGPLAN Notices},
  doi = {http://doi.acm.org/10.1145/1159803.1159811},
  xxxpublisher = {ACM},
  abstract = {This paper is a much simplified and completely-rewritten version of an earlier paper Wobbly types: type inference for generalized algebraic data types.},
  year = {2006},
  month = {September},
  location = {Portland, Oregon, USA},
  xxxisbn = {1-59593-309-3},
  pages = {50--61},
  title = {Simple Unification-Based Type Inference for {GADTs}},
}

@book{appel:modern,
  publisher = {Cambridge University Press},
  title = {Modern Compiler Implementation},
  address = {Cambridge, UK},
  author = {Andrew W. Appel},
  note = {Available in three editions: C, Java, and ML},
  year = {1998},
}

@article{whalley:isolation,
  number = {5},
  subject = {{\bf D.2.5}: Software, SOFTWARE ENGINEERING, Testing and Debugging, Debugging aids. {\bf D.3.4}: Software, PROGRAMMING LANGUAGES, Processors, Compilers. {\bf D.3.4}: Software, PROGRAMMING LANGUAGES, Processors, Optimization.},
  keywords = {algorithms; languages},
  author = {David B. Whalley},
  journal = {ACM Transactions on Programming Languages and Systems},
  year = {1994},
  xxxurl = {http://www.acm.org/pubs/toc/Abstracts/0164-0925/186103.html},
  abstract = {This paper describes a tool called \emph{vpoiso} that was developed to isolate errors automatically in the \emph{vpo} compiler system. The two general types of compiler errors isolated by this tool are optimization and nonoptimization errors. When isolating optimization errors, \emph{vpoiso} relies on the \emph{vpo} optimizer to identify sequences of changes, referred to as transformations, that result in semantically equivalent code and to provide the ability to stop performing \emph{improving} (or unnecessary) transformations after a specified number have been performed. A compilation of a typical program by \emph{% vpo} often results in thousands of \emph{improving} transformations being performed. The \emph{vpoiso} tool can automatically isolate the first \emph{ improving} transformation that causes incorrect output of the execution of the compiled programs by using a binary search that varies the number of \emph{% improving} transformation performed. Not only is the illegal transformation automatically isolated, but \emph{% vpoiso} also identifies the location and instant the transformation is performed in \emph{vpo}. Nonoptimization errors occur from problems in the front end, code generator, and \emph{necessary} transformations in the optimizer. If another compiler is available that can produce correct (but perhaps more inefficient) code, then \emph{vpoiso} can isolate nonoptimization errors to a single function. Automatic isolation of compiler errors facilitates retargeting a compiler to a new machine, maintenance of the compiler, and supporting experimentation with new optimizations.},
  title = {Automatic Isolation of Compiler Errors},
  month = {September},
  coden = {ATPSDT},
  xxxissn = {0164-0925},
  pages = {1648--1659},
  volume = {16},
}

@inproceedings{floyd:meaning,
  path = {robert-floyd/assigning-meaning.djvu},
  checked = {13 September 1992},
  xxxbooktitle = {Mathematical Aspects of Computer Science},
  place = {New York City},
  booktitle = {Proceedings of Symposia in Applied Mathematics},
  address = {Providence, Rhode Island},
  annote = {[to get] first idea of termination function to prove termination of algorithms.},
  editor = {J. T. Schwartz},
  publisher = {American Mathematical Society},
  title = {Assigning Meanings to Programs},
  volume = {19},
  dates = {April 5--7, 1966},
  year = {1967},
  pages = {19--32},
  author = {Robert W. Floyd},
}

@book{dijkstra:discipline,
  publisher = {Prentice-Hall},
  title = {A Discipline of Programming},
  address = {Englewood Cliffs, NJ},
  author = {Edsger W. Dijkstra},
  year = {1976},
}

@article{kam-ullman:global-iterative-analysis,
  number = {1},
  bibdate = {2003-11-20},
  bibsource = {DBLP, http://dblp.uni-trier.de/db/journals/jacm/jacm23.html#KamU76},
  author = {John B. Kam and Jeffrey D. Ullman},
  journal = {Journal of the ACM},
  year = {1976},
  volume = {23},
  xxxurl = {http://doi.acm.org/10.1145/321921.321938},
  pages = {158--171},
  title = {Global Data Flow Analysis and Iterative Algorithms},
}

@inproceedings{kildall:unified-optimization,
  title = {A unified approach to global program optimization},
  month = {October},
  booktitle = {Conference Record of the ACM Symposium on Principles of Programming Languages},
  author = {Gary A. Kildall},
  pages = {194--206},
  year = {1973},
}

@article{kam-ullman:monotone-flow-analysis,
  title = {Monotone Data Flow Analysis Frameworks},
  volume = {7},
  year = {1977},
  author = {John B. Kam and Jeffrey D. Ullman},
  journal = {Acta Informatica},
  pages = {305--317},
}

@inproceedings{cousot:abstract-interpretation:1977,
  xxxaddress = {Los Angeles, California},
  author = {Patrick Cousot and Radhia Cousot},
  annote = {Very theoretical.},
  title = {Abstract Interpretation: {A} Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints},
  month = {January},
  year = {1977},
  where = {filed with reprints},
  pages = {238--252},
  booktitle = {Conference Record of the 4th ACM Symposium on Principles of Programming Languages},
}

@inproceedings{cousot:systematic-analysis-frameworks,
  title = {Systematic Design of Program Analysis Frameworks},
  month = {January},
  year = {1979},
  author = {Patrick Cousot and Radhia Cousot},
  pages = {269--282},
  booktitle = {Conference Record of the 6th Annual ACM Symposium on Principles of Programming Languages},
}

@inproceedings{schmidt:data-flow-analysis-model-checking,
  bibdate = {Mon May 3 12:57:52 MDT 1999},
  xxxdress = {pub-ACM:adr},
  acknowledgement = {Nelson H. F. Beebe, University of Utah, Department of Mathematics, 110 LCB, 155 S 1400 E RM 233, Salt Lake City, UT 84112-0090, USA, Tel: +1 801 581 5254, FAX: +1 801 581 4148, e-mail: \path|beebe@math.utah.edu|, \path|beebe@acm.org|, \path|beebe@computer.org| (Internet), URL: \path|http://www.math.utah.edu/~beebe/|},
  subject = {{\bf D.3.4} Software, PROGRAMMING LANGUAGES, Processors, Optimization. {\bf D.2.2} Software, SOFTWARE ENGINEERING, Design Tools and Techniques, Flow charts. {\bf D.2.4} Software, SOFTWARE ENGINEERING, Software/Program Verification, Model checking. {\bf D.4.8} Software, OPERATING SYSTEMS, Performance, Modeling and prediction.},
  author = {David A. Schmidt},
  xxxpublisher = {ACM Press},
  keywords = {algorithms; verification},
  editor = {ACM},
  xxxurl = {http://www.acm.org:80/pubs/citations/proceedings/plan/268946/p38-schmidt/},
  title = {Data flow analysis is model checking of abstract interpretations},
  bibsource = {http://www.acm.org/pubs/toc/},
  year = {1998},
  xxxisbn = {0-89791-979-3},
  pages = {38--48},
  booktitle = {Conference Record of the 25th Annual ACM Symposium on Principles of Programming Languages},
}

@book{muchnick:compiler-implementation,
  bibdate = {Thu Sep 11 07:11:02 1997},
  price = {US\$89.95},
  author = {Steven S. Muchnick},
  xxxisbn = {1-55860-320-4},
  publisher = {Morgan Kaufmann},
  year = {1997},
  address = {San Mateo, CA},
  lccn = {QA76.76.C65M8 1997},
  pages = {1004},
  title = {Advanced compiler design and implementation},
}

@inproceedings{hendren:soot:2000,
  pages = {18--34},
  publisher = {Springer-Verlag},
  title = {Optimizing {Java} Bytecode Using the {Soot} Framework: Is It Feasible?},
  address = {London, UK},
  year = {2000},
  booktitle = {CC '00: Proceedings of the 9th International Conference on Compiler Construction},
  xxxisbn = {3-540-67263-X},
  author = {Vall\'{e}e-Rai, Raja and Gagnon, Etienne and Hendren, Laurie J. and Lam, Patrick and Pominville, Patrice and Sundaresan, Vijay},
}

@inproceedings{necula:cil:2002,
  pages = {213--228},
  publisher = {Springer-Verlag},
  title = {{CIL}: Intermediate Language and Tools for Analysis and Transformation of {C}~Programs},
  address = {London, UK},
  year = {2002},
  booktitle = {CC '02: Proceedings of the 11th International Conference on Compiler Construction},
  xxxisbn = {3-540-43369-4},
  author = {Necula, George C. and McPeak, Scott and Rahul, Shree Prakash and Weimer, Westley},
}

@article{hughes:lists-representation:article,
  number = {3},
  bibdate = {Wed Nov 11 12:16:26 MST 1998},
  treatment = {P Practical},
  day = {3},
  volume = {22},
  xxxissn = {0020-0190},
  pages = {141--144},
  corpsource = {Inst. for Dataprocessing, Chalmers Tech. Univ., Goteborg, Sweden},
  classification = {723; C6130 (Data handling techniques)},
  affiliationaddress = {Chalmers Technical Univ, Goteborg, Swed},
  acknowledgement = {Acknowledge Nelson H. F. Beebe},
  author = {R. John Muir Hughes},
  journal = {Information Processing Letters},
  subject = {D.1.m Software, PROGRAMMING TECHNIQUES, Miscellaneous \\ E.1 Data, DATA STRUCTURES, Lists \\ I.1.1 Computing Methodologies, ALGEBRAIC MANIPULATION, Expressions and Their Representation, Representations (General and Polynomial)},
  month = {March},
  title = {A Novel Representation of Lists and its Application to the Function ``Reverse''},
  keywords = {computer programming; data processing; data representation; Data Structures; first-class functions; functional programming; list processing; naive reverse; program transformation; programming; reverse function; theory},
  journalabr = {Inf Process Lett},
  pubcountry = {Netherlands A07},
  coden = {IFPLAT},
  year = {1986},
}

@article{huet:zipper,
  number = {5},
  author = {G{\'e}rard Huet},
  journal = {Journal of Functional Programming},
  year = {1997},
  month = {September},
  xxxnote = {Functional Pearl},
  volume = {7},
  pages = {549--554},
  title = {The {Zipper}},
}

